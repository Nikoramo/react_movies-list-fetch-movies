{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/FindMovie/FindMovie.tsx","api.ts","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","FindMovie","query","onChangeQuery","onSubmit","selectedMovie","isLoading","hasError","canAddMovie","onAdd","e","preventDefault","htmlFor","type","id","placeholder","value","onChange","target","classNames","disabled","length","onClick","getMovie","fetch","then","res","json","catch","Response","Error","App","useState","setMovies","setSelectedMovie","setQuery","hasLoadingError","setHasLoadingError","setIsLoading","setCanAddMovie","normalizeData","data","posterUrl","Poster","newMovie","Title","Plot","imdbID","handleFormSubmit","a","find","prevMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e96ca2fc.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movieCard\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          data-cy=\"moviePoster\"\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\" data-cy=\"movieTitle\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\" data-cy=\"movieDescription\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl} data-cy=\"movieURL\">\n          IMDB\n        </a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import React from 'react';\nimport './FindMovie.scss';\nimport classNames from 'classnames';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  query: string,\n  onChangeQuery(value: string): void,\n  onSubmit(value: string): void,\n  selectedMovie: Movie | null,\n  isLoading: boolean,\n  hasError: boolean,\n  canAddMovie: boolean,\n  onAdd(): void,\n};\n\nexport const FindMovie: React.FC<Props> = ({\n  query,\n  onChangeQuery,\n  onSubmit,\n  selectedMovie,\n  isLoading,\n  hasError,\n  canAddMovie,\n  onAdd,\n}) => {\n  return (\n    <>\n      <form\n        className=\"find-movie\"\n        onSubmit={(e) => {\n          e.preventDefault();\n          onSubmit(query);\n        }}\n      >\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className=\"input is-dander\"\n              value={query}\n              onChange={(e) => onChangeQuery(e.target.value)}\n            />\n          </div>\n\n          {hasError && (\n            <p className=\"help is-danger\" data-cy=\"errorMessage\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              data-cy=\"searchButton\"\n              type=\"submit\"\n              className={classNames(\n                'button',\n                'is-light',\n                {\n                  'is-loading': isLoading,\n                },\n              )}\n              disabled={query.length === 0}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          {canAddMovie && (\n            <div className=\"control\">\n              <button\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={onAdd}\n              >\n                Add to the list\n              </button>\n            </div>\n          )}\n        </div>\n      </form>\n\n      {selectedMovie && (\n        <div className=\"container\" data-cy=\"previewContainer\">\n          <h2 className=\"title\">Preview</h2>\n          <MovieCard movie={selectedMovie} />\n        </div>\n      )}\n    </>\n  );\n};\n","import { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ReponseError';\n\nconst API_URL = 'https://www.omdbapi.com/?i=tt3896198&apikey=b9e438a2';\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\nimport { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ReponseError';\n\nimport { getMovie } from './api';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n  const [selectedMovie, setSelectedMovie] = useState<Movie | null>(null);\n  const [query, setQuery] = useState('');\n  const [hasLoadingError, setHasLoadingError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [canAddMovie, setCanAddMovie] = useState(false);\n\n  function normalizeData(data: MovieData | ResponseError) {\n    if ('Error' in data) {\n      return;\n    }\n\n    const posterUrl = data.Poster === 'N/A'\n      ? 'https://via.placeholder.com/360x270.png?text=no%20preview'\n      : data.Poster;\n\n    const newMovie = {\n      title: data.Title,\n      description: data.Plot,\n      imgUrl: posterUrl,\n      imdbUrl: `https://www.imdb.com/title/${data.imdbID}`,\n      imdbId: data.imdbID,\n    };\n\n    setSelectedMovie(newMovie);\n    setCanAddMovie(true);\n  }\n\n  const handleFormSubmit = async (value: string) => {\n    try {\n      setIsLoading(true);\n      const data = await getMovie(value);\n\n      normalizeData(data);\n\n      if ('Error' in data) {\n        setHasLoadingError(true);\n        setCanAddMovie(false);\n      }\n    } catch {\n      setHasLoadingError(true);\n      setCanAddMovie(false);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleInputChange = (value: string) => {\n    setQuery(value);\n    setHasLoadingError(false);\n  };\n\n  const handleAddMovie = () => {\n    if (!movies.find(movie => movie.imdbId === selectedMovie?.imdbId)\n          && selectedMovie) {\n      setMovies(prevMovies => [...prevMovies, selectedMovie]);\n    }\n\n    setQuery('');\n    setCanAddMovie(false);\n    setSelectedMovie(null);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie\n          query={query}\n          onChangeQuery={handleInputChange}\n          onSubmit={handleFormSubmit}\n          selectedMovie={selectedMovie}\n          isLoading={isLoading}\n          hasError={hasLoadingError}\n          canAddMovie={canAddMovie}\n          onAdd={handleAddMovie}\n        />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}